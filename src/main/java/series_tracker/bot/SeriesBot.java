package series_tracker.bot;

import org.jvnet.hk2.annotations.Service;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import series_tracker.service.SeriesService;

import java.util.List;

@Component
public class SeriesBot extends TelegramLongPollingBot {

    private final SeriesService seriesService;

    public SeriesBot(SeriesService seriesService) {
        this.seriesService = seriesService;
    }


    @Value("${telegram.bot.username}")
    private String botUsername;

    @Value("${telegram.bot.token}")
    private String botToken;

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasCallbackQuery()) {
                handleCallback(update);
            } else if (update.hasMessage() && update.getMessage().hasText()) {
                handleMessage(update.getMessage());
            }
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleMessage(Message message) throws TelegramApiException {
        String text = message.getText();
        long chatId = message.getChatId();

        if (text.toLowerCase().startsWith("–Ω–∞—á–∞—Ç—å")) {
            String name = text.substring(7);
            seriesService.addSeries(name, chatId);
            sendMessage(chatId, "–ü—Ä–∏–Ω—è—Ç–æ. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!");
        }

        if (text.contains("—Å–µ–∑–æ–Ω")) {
            String name = text.substring(0, text.indexOf("—Å–µ–∑–æ–Ω") - 1);
            int season = Integer.parseInt(text.substring(text.lastIndexOf(" ") + 1));
            seriesService.checkSeason(seriesService.findByName(name).getId(), season);
        }

        if (text.contains("—Å–µ—Ä–∏—è")) {
            String name = text.substring(0, text.indexOf("—Å–µ—Ä–∏—è") - 1);
            int episode = Integer.parseInt(text.substring(text.lastIndexOf(" ") + 1));
            seriesService.checkEpisode(seriesService.findByName(name).getId(), episode);
        }

        switch (text) {
            case "/start", "—Å—Ç–∞—Ä—Ç" -> {
                sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç, –Ω–∞ –∫–∞–∫–æ–π —Å–µ—Ä–∏–∏ —Å–µ—Ä–∏–∞–ª–∞ –≤—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /–∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–µ—Ä–∏–∞–ª—ã –∏ –æ—Ç–º–µ—á–∞—Ç—å —Å–µ—Ä–∏–∏ –±–µ–∑ –∫–Ω–æ–ø–æ–∫.");
                sendMenu(chatId);
            }
            case "/menu", "–º–µ–Ω—é" -> sendMenu(chatId);
            case "/list", "—Å–ø–∏—Å–æ–∫" -> sendSeriesList(chatId);
            case "/–∫–æ–º–∞–Ω–¥—ã" -> sendCommands(chatId);
            case "finished" -> {
                var finished = seriesService.getFinishedByChatId(chatId);
                if (finished.isEmpty()) {
                    sendMessage(chatId, "–ó–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç");
                } else {
                    StringBuilder sb = new StringBuilder("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã:\n\n");
                    for (var s : finished) {
                        long days = seriesService.watchlasting(s.getId());
                        sb.append(s.getName())
                                .append(" (").append(days).append(" –¥–Ω. –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)")
                                .append("\n");
                    }
                    sendMessage(chatId, sb.toString());
                }
            }
            default -> sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π.");
        }
    }

    private void sendCommands(long chatId) throws TelegramApiException {
        String text = "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–∏–∞–ª, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ \"–Ω–∞—á–∞—Ç—å\", –ø—Ä–æ–±–µ–ª –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞. –ù–∞–ø—Ä–∏–º–µ—Ä \"–ù–∞—á–∞—Ç—å –î–µ–∫—Å—Ç–µ—Ä\". " +
                "–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å —Å–µ—Ä–∏—é, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞ –∏ –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä \"–î–µ–∫—Å—Ç–µ—Ä 17\". " +
                "–ß—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Å–µ–∑–æ–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞, –ø—Ä–æ–±–µ–ª, —Å–ª–æ–≤–æ \"—Å–µ–∑–æ–Ω\" –∏ –Ω–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä \"–î–µ–∫—Å—Ç–µ—Ä —Å–µ–∑–æ–Ω 4\".";
        sendMessage(chatId, text);
    }

    private void sendMessage(long chatId, String text) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        execute(message);
    }

    private void sendMenu(long chatId) throws TelegramApiException {
        InlineKeyboardButton addBtn = new InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏–∞–ª");
        addBtn.setCallbackData("add");
        InlineKeyboardButton listBtn = new InlineKeyboardButton("–°–µ—Ä–∏–∞–ª—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ");
        listBtn.setCallbackData("list");
        InlineKeyboardButton finishedBtn = new InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã");
        finishedBtn.setCallbackData("finished");
        sendInlineKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", List.of(List.of(addBtn, listBtn, finishedBtn)));
    }

    private void sendInlineKeyboard(long chatId, String text, List<List<InlineKeyboardButton>> buttons) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(buttons);

        message.setReplyMarkup(markup);
        execute(message);
    }


    private InlineKeyboardMarkup buildSeriesKeyboard(Long seriesId) {
        InlineKeyboardButton episodeBtn = new InlineKeyboardButton("+ —Å–µ—Ä–∏—è");
        episodeBtn.setCallbackData("episode:" + seriesId);

        InlineKeyboardButton seasonBtn = new InlineKeyboardButton("+ —Å–µ–∑–æ–Ω");
        seasonBtn.setCallbackData("season:" + seriesId);

        InlineKeyboardButton finishBtn = new InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å");
        finishBtn.setCallbackData("finish:" + seriesId);

        List<List<InlineKeyboardButton>> rows = List.of(
                List.of(episodeBtn, seasonBtn, finishBtn)
        );

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);
        return markup;
    }

    private void sendSeriesList(long chatId) throws TelegramApiException {
        var inProgress = seriesService.getInProgressByChatId(chatId);
        if (inProgress.isEmpty()) {
            sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Ä–∏–∞–ª–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ üì∫");
        } else {
            for (var s : inProgress) {
                long days = seriesService.watchlasting(s.getId());
                SendMessage msg = new SendMessage();
                msg.setChatId(chatId);
                msg.setText(
                        s.getName() + " ‚Äî –°–µ–∑–æ–Ω " + s.getSeason() + ", –°–µ—Ä–∏—è " + s.getEpisode() +
                                "\n–°–º–æ—Ç—Ä—é —É–∂–µ " + days + " –¥–Ω."
                );
                msg.setReplyMarkup(buildSeriesKeyboard(s.getId()));
                execute(msg);
            }
        }
    }

    private void handleCallback(Update update) throws TelegramApiException {
        String data = update.getCallbackQuery().getData();
        long chatId = update.getCallbackQuery().getMessage().getChatId();

        if (data.startsWith("episode:")) {
            Long seriesId = Long.parseLong(data.split(":")[1]);
            seriesService.checkEpisode(seriesId,
                    seriesService.findById(seriesId).getEpisode() + 1);
            sendMessage(chatId, "–ì–æ—Ç–æ–≤–æ!");
        }

        if (data.startsWith("season:")) {
            Long seriesId = Long.parseLong(data.split(":")[1]);
            seriesService.checkSeason(seriesId,
                    seriesService.findById(seriesId).getSeason() + 1);
            sendMessage(chatId, "–ù–∞—á–∞–ª–∏ –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω!");
        }

        if (data.startsWith("finish:")) {
            Long seriesId = Long.parseLong(data.split(":")[1]);
            seriesService.markFinished(seriesId);
            sendMessage(chatId, "–í—Å—ë, —Å–µ—Ä–∏–∞–ª –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.");
        }

        switch (data) {
            case "add" -> sendMessage(chatId, "–ù–∞–ø–∏—à–∏: –Ω–∞—á–∞—Ç—å <–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞>");
            case "list" -> {
                var inProgress = seriesService.getInProgressByChatId(chatId);
                if (inProgress.isEmpty()) {
                    sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Ä–∏–∞–ª–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ");
                } else {
                    for (var s : inProgress) {
                        SendMessage msg = new SendMessage();
                        msg.setChatId(chatId);
                        msg.setText(s.getName() + " ‚Äî –°–µ–∑–æ–Ω " + s.getSeason() + ", –°–µ—Ä–∏—è " + s.getEpisode());
                        msg.setReplyMarkup(buildSeriesKeyboard(s.getId()));
                        execute(msg);
                    }
                }
            }
            case "finished" -> {
                var finished = seriesService.getFinishedByChatId(chatId);
                if (finished.isEmpty()) {
                    sendMessage(chatId, "–ó–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç");
                } else {
                    StringBuilder sb = new StringBuilder("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã:\n");
                    for (var s : finished) {
                        sb.append(s.getName()).append("\n");
                    }
                    sendMessage(chatId, sb.toString());
                }
            }
            default -> sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ");
        }
    }
}
